require('dotenv').config();
const express = require('express');
const sequelize = require('./db');
const { Op } = require('sequelize')
const models = require('./models/models');
const TelegramAPI = require('node-telegram-bot-api');
const { Order } = require('./models/models');
const { sync } = require('./db');
const { text } = require('express');
const https = require("https");
const request = require('request');
const { resolve } = require('path');
const { rejects } = require('assert');
const { measureMemory } = require('vm');
const { on } = require('events');
// const webApp = window.Telegram.WebApp; 

// const PORT = process.env.PORT || 5000;
const app = express();
const token = process.env.TOKEN;
const serverID = -1001796968322;

const bot = new TelegramAPI(token, { polling: true });

const users = {
    managers: [
        // { id: 317401874, }
    ],
    masters: [
        { id: 317401874, },
    ]
    // max: 368152093,
}

//–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
// bot.setMyCommands([
//     { command: '/start', description: 'menu' }
// ]);

const keyboards = {
    //–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    cancelOption: {
        reply_markup: JSON.stringify({
            keyboard: [
                [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å' }],
            ],
            resize_keyboard: true,
            hide_keyboard: true
        })
    },
    //–ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    managerMenu : {
        reply_markup: JSON.stringify(
            {
                keyboard: [
                    [{ text: '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑' }],
                    [{ text: '–í—Å–µ –∑–∞–∫–∞–∑—ã' }, { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' }],
                    [{ text: '–°–∫–ª–∞–¥' }],
                ],
                resize_keyboard: true,
                hide_keyboard: true
            }
        )
    },
    //–ú–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    masterMenu : {
        reply_markup: JSON.stringify(
            {
                keyboard: [
                    [{ text: '–í—Å–µ –∑–∞–∫–∞–∑—ã' }, { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' }],
                ],
                resize_keyboard: true,
                hide_keyboard: true
            }
        )
    },
    //–û–ø—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    editOptions: {
        reply_markup: JSON.stringify({
            keyboard: [
                [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å' }, { text: '–ì–æ—Ç–æ–≤–æ' }],
                // [{ text: '–û–ø–∏—Å–∞–Ω–∏–µ' }],
                // [{ text: '–°—Ä–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏' }],
                // [{ text: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞' }],
                // [{ text: '–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏/—Ç–µ–ª–µ—Ñ–æ–Ω' }],
                // [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–æ–Ω–µ' }],
                // [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–º–º–µ—Ä–µ' }],
                [{ text: '–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑' }],
            ],
        })
    }
}

const {managerMenu, masterMenu, cancelOption, editOptions} = keyboards;

// –ò–Ω—Ñ–æ –∫–∞–∫ –ø—Ä–≤–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–æ–¥
const aboutNeonCodes = `–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–Ω–∞.
–ü—Ä–∏–º–µ—Ä 6–∫3.5.
–ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–æ–ª—â–∏–Ω–∞ –Ω–µ–æ–Ω–∞(6 –∏–ª–∏ 8);
–í—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–¥ —Ü–≤–µ—Ç–∞:
    –∫ - –∫—Ä–∞—Å–Ω—ã–π,
    —Å - —Å–∏–Ω–∏–π,
    –∑ - –∑–µ–ª–µ–Ω—ã–π,
    –æ - –æ—Ä–∞–Ω–∂–µ–≤—ã–π,
    –≥ - –≥–æ–ª—É–±–æ–π,
    –∂ - –∂—ë–ª—Ç—ã–π,
    —Ä - —Ä–æ–∑–æ–≤—ã–π,
    –± - –±–µ—Ä—é–∑–æ–≤—ã–π,
    —Ö - —Ö–æ–ª–æ–¥–Ω—ã–π –±–µ–ª—ã–π,
    —Ç - —Ç—ë–ø–ª—ã–π –±–µ–ª—ã–π.
–¢—Ä–µ—Ç—å–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –¥–ª–∏–Ω–∞ –Ω–µ–æ–Ω–∞(—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏ –æ–¥–∏–Ω –∑–Ω–∞–∫ –ø–æ—Å–ª–µ);
6–∫3.5 —á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–µ–æ–Ω 6–º–º –∫—Ä–∞—Å–Ω—ã–π 3.5 –º–µ—Ç—Ä–∞.
–ï—Å–ª–∏ –≤ –∑–∞–∫–∞–∑–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ —Ç–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –æ–ø–∏—Å–∞—Ç—å —Å–ø–æ—Å–æ–±–æ–º –≤—ã—à–µ
–ù–∞–ø—Ä–∏–º–µ—Ä: 6–∫3.5 6—Å4.6
`


//https://api.telegram.org/bot5575099005:AAFREUhpqvo12MIMn-8OumJylxogNkEV1us/sendMessage?chat_id=317401874&text=Enter%20your%20text%20here&reply_markup=%7B%22keyboard%22:[[%7B%22text%22:%22–°–æ–∑–¥–∞—Ç—å%20–∑–∞–∫–∞–∑%22%7D],[%7B%22text%22:%22–í—Å–µ%20–∑–∞–∫–∞–∑—ã%22%7D],[%7B%22text%22:%22–ú–æ–∏%20–∑–∞–∫–∞–∑—ã%22%7D],[%7B%22text%22:%22–ù–∞–∑–∞–¥%20–≤%20–º–µ–Ω—é%22%7D]]%7D

const start = async () => {
    try {
        await sequelize.authenticate();
        await sequelize.sync();
        // users.managers.forEach(user => bot.sendMessage(user.id, '–ü–æ–≥–Ω–∞–ª–∏!'));
        users.managers.forEach(user => manager(user.id));
        users.masters.forEach(user => master(user.id));
    } catch (e) {
        console.log(e);
    }
};

//–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
start();




//---------ROLES----------------//
//–§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const manager = async (userID, lastMsg = []) => {
    let messageHistory = lastMsg;
    const botMsg = botSendMessage(userID, '–ú–µ–Ω—é', managerMenu);
    botMsg.then(msg => messageHistory.push(msg.message_id));
    try {
        bot.on('callback_query', async function (msg) {
            console.log(msg);
        })
        bot.on('message', async function managerListener(msg) {
            console.log(msg);
            const chatId = msg.chat.id;
            if (chatId == userID || msg.text != undefined) {
                const msgText = msg.text;
                const userMsg = msg.message_id;
                if (chatId == userID) {
                    if (msgText == '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑') {
                        bot.removeListener('message', managerListener);
                        messageHistory.push(userMsg);
                        await createOrder(userID);
                        return clearChat(userID, messageHistory);
                    }
                    if (msgText == '–í—Å–µ –∑–∞–∫–∞–∑—ã') {
                        messageHistory.push(userMsg);
                        await clearChat(userID, messageHistory);
                        const shownOrders = findOrders(userID, { is_done: false });
                        shownOrders.then(async (orders) => {
                            // console.log(orders);
                            const botMsgs = orders.map(order => order.message_id)
                            messageHistory = botMsgs;
                            const botMsg = botSendMessage(userID, "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", managerMenu);
                            botMsg.then(msg => {
                                messageHistory.push(msg.message_id);
                                manager(userID, messageHistory);
                            });
                        })
                        return bot.removeListener('message', managerListener);
                    }
                    if (msgText == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
                        messageHistory.push(userMsg);
                        await clearChat(userID, messageHistory);
                        const shownOrders = findOrders(userID, { is_done: false });
                        shownOrders.then(async (orders) => {
                            const botMsgs = orders.map(order => order.message_id)
                            messageHistory = botMsgs;
                            const botMsg = botSendMessage(userID, "–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã'üòÇ", managerMenu);
                            botMsg.then(msg => {
                                messageHistory.push(msg.message_id);
                                manager(userID, messageHistory);
                            });
                        })
                        return bot.removeListener('message', managerListener);
                    }
                    // if (msgText.slice(0, 6) == '/send_') {
                    //     messageHistory.push(userMsg);
                    //     await clearChat(userID, messageHistory);
                    //     bot.removeListener('message', managerListener);
                    //     return await getDeliveryDatas(userID, +msgText.slice(6));
                    // } 
                    if(msgText == '–°–∫–ª–∞–¥'){
                        // sklad(userID)
                    }
                    if (msgText && msgText.slice(0, 6) == '/file_') {
                        let order = await Order.findAll({ where: { order_id: +msgText.slice(6) }, order: [['deadline', 'DESC']] });
                        if(order.length == 0){
                            const botMsg = botSendMessage(userID, `–ù–µ—Ç —Ñ–∞–π–ª–∞!`, managerMenu);
                            botMsg.then(msg => messageHistory.push(msg.message_id));
                            return manager(userID, messageHistory)
                        };
                        bot.deleteMessage(userID, userMsg);
                        order = order[0].dataValues;
                        const file = botSendDocument(userID, order.file_id, encodeURI(order.order_name), managerMenu);
                        file.then(msg => messageHistory.push(msg.message_id));
                        return
                    }
                    if (msgText && msgText.slice(0, 6) == '/edit_') {
                        //–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–∏—Å–ª–∞
                        bot.deleteMessage(userID, userMsg);
                        await clearChat(userID, messageHistory);
                        bot.removeListener('message', managerListener);
                        return await editOrder(userID, +msgText.slice(6));
                    }
                    if (msg.text === "/start") {
                        messageHistory.push(userMsg);
                        bot.removeListener('message', managerListener);
                        await bot.sendMessage(chatId, "–ú–µ–Ω—é", managerMenu);
                        clearChat(userID, messageHistory);
                        return manager(userID)
                    }
                    if (msgText !== '–í—Å–µ –∑–∞–∫–∞–∑—ã' &&
                        msgText !== '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑' &&
                        msgText !== '–ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
                        messageHistory.push(userMsg);
                        const botMsg = botSendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞", managerMenu);
                        botMsg.then(msg => messageHistory.push(msg.message_id))
                        // bot.deleteMessage(chatId, msg.message_id - 1);
                        // return bot.deleteMessage(chatId, msg.message_id);
                    }
                }
            }
        })
    } catch (e) {
        console.log(e)
    }
}
//–§—É–Ω–∫—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞
const master = async (userID, lastMsg = []) => {
    let messageHistory = lastMsg;
    const botMsg = botSendMessage(userID, '–ú–µ–Ω—é', masterMenu);
    botMsg.then(msg => messageHistory.push(msg.message_id));
    try {
        bot.on('message', async function mastererListener(msg) {
            console.log(msg);
            const chatId = msg.chat.id;
            if (chatId == userID || msg.text != undefined) {
                const msgText = msg.text;
                const userMsg = msg.message_id;
                if (chatId == userID) {
                    if (msgText == '–í—Å–µ –∑–∞–∫–∞–∑—ã') {
                        messageHistory.push(userMsg);
                        await clearChat(userID, messageHistory);
                        const shownOrders = findOrders(userID, { master_id: null }, 'master');
                        shownOrders.then(async (orders) => {
                            // console.log(orders);
                            const botMsgs = orders.map(order => order.message_id)
                            messageHistory = botMsgs;
                            const botMsg = botSendMessage(userID, "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", masterMenu);
                            botMsg.then(msg => {
                                messageHistory.push(msg.message_id);
                                manager(userID, messageHistory);
                            });
                        })
                        return bot.removeListener('message', mastererListener);
                    }
                    if (msgText == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
                        messageHistory.push(userMsg);
                        await clearChat(userID, messageHistory);
                        const shownOrders = findOrders(userID, { master_id: userID });
                        shownOrders.then(async (orders) => {
                            const botMsgs = orders.map(order => order.message_id)
                            messageHistory = botMsgs;
                            const botMsg = botSendMessage(userID, "–¢–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", mastererListener);
                            botMsg.then(msg => {
                                messageHistory.push(msg.message_id);
                                manager(userID, messageHistory);
                            });
                        })
                        return bot.removeListener('message', mastererListener);
                    }
                    if (msgText && msgText.slice(0, 6) == '/take_') {
                        await Order.update(
                            { master: order_name,
                            },
                            { where: { order_id: order_id } }
                        );
                        return
                    }
                    if (msg.text === "/start") {
                        messageHistory.push(userMsg);
                        bot.removeListener('message', managerListener);
                        await bot.sendMessage(chatId, "–ú–µ–Ω—é", managerMenu);
                        clearChat(userID, messageHistory);
                        return manager(userID)
                    }
                    if (msgText !== '–í—Å–µ –∑–∞–∫–∞–∑—ã' &&
                        msgText !== '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑' &&
                        msgText !== '–ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
                        messageHistory.push(userMsg);
                        const botMsg = botSendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞", managerMenu);
                        botMsg.then(msg => messageHistory.push(msg.message_id))
                        // bot.deleteMessage(chatId, msg.message_id - 1);
                        // return bot.deleteMessage(chatId, msg.message_id);
                    }
                }
            }
        })
    } catch (e) {
        console.log(e)
    }
}


//--------USER_ACTIONS---------//
// —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –≤–Ω–µ—Å–µ–Ω–∏–µ –≤ –ë–î
const createOrder = async (userID) => {
    let messageHistory = [];
    const infoText = `–û–¥–∏–Ω –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è - –æ–¥–∏–Ω –∑–∞–∫–∞–∑.
–ï—Å–ª–∏ –≤ –∑–∞–∫–∞–∑–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–≤–µ—Å–æ–∫ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ª–æ–∂–∏—Ç—å –æ–±—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å–æ –≤—Å–µ–º–∏ –≤—ã–≤–µ—Å–∫–∞–º–∏, –Ω–æ –∫–∞–∂–¥—É—é –æ—Ç–¥–µ–ª—å–Ω–æ.
–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞`
    const newOrder = {
        manager_id: userID,
        manager_name: null,
        img_id: null,
        number: null,
        order_name: null,
        neon: null,
        dimer: null,
        description: null,
        file_id: null,
        deadline: null,
        elements: null,
    }
    let orderPreview = {
        description: '',
    };
    //–ö–Ω–æ–ø–∫–∏ –¥–∏–º–µ—Ä–∞
    const dimerbuttons = {
        reply_markup: JSON.stringify({
            keyboard: [
                [{ text: '–ù–µ—Ç' }],
                [{ text: '–ö–Ω–æ–ø–æ—á–Ω—ã–π' }],
                [{ text: '–ü—É–ª—å—Ç' }],
                [{ text: '–ö—Ä—É—Ç–∏–ª–∫–∞' }],
                [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å' }],
            ],
            resize_keyboard: true,
        })
    }

    const aboutDescription = `–û—Ç–ø—Ä–∞–≤—å –æ—Å—Ç–∞–≤—à—É—é—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    1. –ú–µ—Å—Ç–æ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≤–æ–¥–∞:(–Ω–∞ —Å–ª–æ–≤–∞—Ö –∏–ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏);
    2. –û–±—â–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–≤–æ–¥–∞ –æ—Ç –≤—ã–≤–µ—Å–∫–∏: (–Ω—É–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ —Å—Ç–∞–≤–∏—Ç—Å—è –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø—Ä–æ–≤–æ–¥ –¥–æ –±–ª–æ–∫–∞, –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ –±–µ–ª—ã–π –∏–ª–∏ —á–µ—Ä–Ω—ã–π –ø—Ä–æ–≤–æ–¥ —Å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–º –∏ –≤–∏–ª–∫–æ–π (–¥–ª–∏–Ω–∞ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–≤–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –∏–¥–µ—Ç 1,8 –º–µ—Ç—Ä–∞), —Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É –≤ 220 –≤–æ–ª—å—Ç –±–µ–∑ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è –∏ –≤–∏–ª–∫–∏ (—Ç—É—Ç —É–∂–µ –¥–ª–∏–Ω–∞ –ø–æ –∂–µ–ª–∞–Ω–∏—é). –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ: –∫–æ–º–ø–ª–µ–∫—Ç ¬´—Å—Ç–∞–Ω–¥–∞—Ä—Ç¬ª, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∏–¥–µ—Ç 1 –º–µ—Ç—Ä –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≤–æ–¥–∞ - –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –∏ –∫–∞–±–µ–ª—å —Å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–º –∏ –≤–∏–ª–∫–æ–π.
    3. –û—Ç–≤–µ—Ä—Å—Ç–∏—è: (–î–ª—è –æ–∫–æ–Ω –∏–ª–∏ –¥–ª—è —Å—Ç–µ–Ω—ã. –î–ª—è —Å—Ç–µ–Ω—ã –¥–µ–ª–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –≤ –º–∞–∫–µ—Ç–µ.
    4. –§—É—Ä–Ω–∏—Ç—É—Ä–∞: (—Ç—Ä–æ—Å–∏–∫, –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–µ –¥–µ—Ä–∂–∞—Ç–µ–ª–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∞–º–æ—Ä–µ–∑—ã —Å –¥—é–±–µ–ª—è–º–∏)
    5. –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è(–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)`;
    try {
        const botMsg = botSendMessage(userID, infoText, cancelOption);
        botMsg.then(msg => messageHistory.push(msg.message_id));
        bot.on('message', async function dataListener(msg) {
            const chatId = msg.chat.id;
            newOrder.manager_name = msg.from.username;
            if (chatId == userID) {
                const userMsg = msg.message_id;
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if (newOrder.img_id == null && msg.text !== '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    if (!!msg.photo) {
                        clearChat(userID, messageHistory);
                        messageHistory = [];
                        prev = msg.message_id;
                        const HDPhoto = msg.photo.length - 1;
                        newOrder.img_id = msg.photo[HDPhoto].file_id;
                        bot.deleteMessage(userID, userMsg);
                        const preview = botSendPhoto(userID, newOrder.img_id, encodeURI('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n–û—Ç–ø—Ä–∞–≤—å –ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏/–¢–µ–ª–µ—Ñ–æ–Ω:'), cancelOption);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return;
                    } else {
                        await clearChat(userID, messageHistory);
                        messageHistory = [];
                        bot.deleteMessage(userID, userMsg)
                        const botMsg = botSendMessage(userID, `–û—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞. –í —Ñ–æ—Ä–º–∞—Ç–µ .jpg`, cancelOption);
                        botMsg.then(msg => messageHistory.push(msg.message_id));
                        return;
                    };
                }
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                if (newOrder.number == null && msg.text !== '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    bot.deleteMessage(userID, userMsg)
                    clearChat(userID, messageHistory);
                    messageHistory = [];
                    newOrder.number = msg.text;
                    orderPreview.description = `<b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> <a href="tg://user?id=${newOrder.manager_id}">${newOrder.manager_name}</a>\n<b>–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏:</b> <i>${newOrder.number}</i>\n`;
                    messageHistory = [];
                    // bot.editMessageMedia({ type: 'photo', media: newOrder.img_id, caption: orderPreview.description }, { chat_id: userID, message_id: prev })

                    const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n' + '–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞(–Ω–∞–∑—ã–≤–∞–π –æ—Å–º—ã—Å–ª–µ–Ω–æ!)'), cancelOption);
                    preview.then(msg => messageHistory.push(msg.message_id));
                    return
                }
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                if (newOrder.order_name == null && msg.text !== '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    bot.deleteMessage(userID, userMsg)
                    clearChat(userID, messageHistory);
                    messageHistory = [];
                    newOrder.order_name = msg.text;
                    orderPreview.description += `<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b> <i>${newOrder.order_name}</i>\n`;
                    const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n' + aboutNeonCodes), cancelOption);
                    preview.then(msg => messageHistory.push(msg.message_id));
                    return
                }
                // –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–æ–Ω–µ
                if (newOrder.neon == null && msg.text !== '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    clearChat(userID, messageHistory);
                    messageHistory = [];
                    const neonInfo = await neonCalc(msg.text);
                    bot.deleteMessage(userID, userMsg);
                    if (neonInfo !== undefined) {
                        orderPreview.description += '<b>–ù–µ–æ–Ω:</b> ' + neonInfo.neon.join(', ') + '\n<b>–ë–ª–æ–∫:</b>' + neonInfo.power + 'W';
                        const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n' + '–û—Ç–ø—Ä–∞–≤—å –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∏—Å–ª–æ–º'), cancelOption);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        newOrder.neon = msg.text;
                        newOrder.power = neonInfo.power;
                        return
                    } else {
                        const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å\n' + aboutNeonCodes), cancelOption);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    }

                };
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if (newOrder.elements == null && msg.text !== '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    if (!isNaN(msg.text)) {
                        bot.deleteMessage(userID, userMsg)
                        clearChat(userID, messageHistory);
                        messageHistory = [];
                        newOrder.elements = msg.text;
                        orderPreview.description += `\n<b>–≠–ª–µ–º–µ–Ω—Ç–æ–≤:</b> <i>${newOrder.elements}</i>\n`;
                        const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n' + '–û—Ç–ø—Ä–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –¥–∏–º–µ—Ä\n–î–∏–º–º–µ—Ä –∫–Ω–æ–ø–æ—á–Ω—ã–π –î–ö - –¥–æ 3—Ö –º–µ—Ç—Ä–æ–≤ \n–î–∏–º–º–µ—Ä –ø—É–ª—å—Ç - –æ—Ç 3—Ö –º–µ—Ç—Ä–æ–≤ –¥–æ 15 \n–î–∏–º–º–µ—Ä –∫—Ä—É—Ç–∏–ª–∫–∞ –æ—Ç 3—Ö –º–µ—Ç—Ä–æ–≤ –¥–æ 15'), dimerbuttons);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    } else {
                        await clearChat(userID, messageHistory);
                        messageHistory = [];
                        bot.deleteMessage(userID, userMsg)
                        const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É'), cancelOption);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    }
                }
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–º–µ—Ä–µ
                if (newOrder.dimer == null && msg.text !== '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    if (
                        msg.text == '–ù–µ—Ç' ||
                        msg.text == '–ö–Ω–æ–ø–æ—á–Ω—ã–π' ||
                        msg.text == '–ü—É–ª—å—Ç' ||
                        msg.text == '–ö—Ä—É—Ç–∏–ª–∫–∞'
                    ) {
                        bot.deleteMessage(userID, userMsg)
                        clearChat(userID, messageHistory);
                        messageHistory = [];
                        newOrder.dimer = msg.text;
                        orderPreview.description += `\n<b>–î–∏–º–º–µ—Ä:</b> <i>${newOrder.dimer}</i>\n`;
                        const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n' + aboutDescription), cancelOption);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    } else {
                        await clearChat(userID, messageHistory);
                        messageHistory = [];
                        bot.deleteMessage(userID, userMsg)
                        const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞\n'), dimerbuttons);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    };
                };
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                if (newOrder.description == null && msg.text !== '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    bot.deleteMessage(userID, userMsg)
                    clearChat(userID, messageHistory);
                    messageHistory = [];
                    newOrder.description = msg.text;
                    orderPreview.description += `<b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:</b> <i>${newOrder.description}</i>\n`;
                    const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n' + '–£–∫–∞–∂–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å! –ì–¥–µ 0 —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è, 1 - –∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–¥.'), cancelOption);
                    preview.then(msg => messageHistory.push(msg.message_id));
                    return
                }
                // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
                if (newOrder.deadline == null && msg.text !== '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    if (!isNaN(msg.text)) {
                        const today = new Date(msg.date * 1000);
                        newOrder.deadline = Math.round(today.setDate(today.getDate() + +msg.text) / 1000);
                        // newOrder.deadline = today.setDate(today.getDate() + +msg.text);
                        bot.deleteMessage(userID, userMsg)
                        clearChat(userID, messageHistory);
                        messageHistory = [];
                        orderPreview.description += `<b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:</b> <i>${new Date(newOrder.deadline * 1000).getDate()}.${new Date(newOrder.deadline * 1000).getMonth() + 1}</i>\n`;
                        const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n' + '–°–∫–∏–Ω—å —Ñ–∞–π–ª(.cdr)'), cancelOption);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    } else {
                        await clearChat(userID, messageHistory);
                        messageHistory = [];
                        bot.deleteMessage(userID, userMsg)
                        const preview = botSendPhoto(userID, newOrder.img_id, encodeURI(orderPreview.description + '\n\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É\n–ì–¥–µ 0 —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è, 1 - –∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–¥.'), cancelOption);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    }
                }
                if (newOrder.file_id == null && msg.text !== '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    if (!!msg.document) {
                        if (isCDRfile(msg.document.file_name)) {
                            messageHistory.push(msg.message_id);
                            newOrder.file_id = msg.document.file_id;
                            const botMsg = botSendMessage(userID, `–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!\n–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!`, managerMenu);
                            botMsg.then(msg => messageHistory.push(msg.message_id));
                            const order = await Order.create(newOrder);
                            manager(userID, messageHistory)
                            return bot.removeListener('message', dataListener);
                        } else {
                            const botMsg = botSendMessage(userID, `–ö–∞–∂–µ—Ç—Å—è —Ñ–∞–π–ª –Ω–µ —Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞`, cancelOption);
                            botMsg.then(msg => messageHistory.push(msg.message_id));
                            return
                        }
                    } else {
                        bot.deleteMessage(userID, userMsg);
                        const botMsg = botSendMessage(userID, `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–∞–π–ª .cdr`, cancelOption);
                        botMsg.then(msg => messageHistory.push(msg.message_id));
                        return
                    }
                }

                if (msg.text === '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    bot.deleteMessage(userID, userMsg);
                    const botMsg = botSendMessage(userID, "–ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω", managerMenu);
                    botMsg.then(msg => manager(userID, [msg.message_id]));
                    await clearChat(userID, messageHistory);
                    return bot.removeListener('message', dataListener);
                }
            }
        })
    } catch (e) {
        return console.log(e)
    }
};

const editOrder = async (userID, order_id, lastMsg = []) => {
    //–î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
    let messageHistory = lastMsg;
    try {
        let editingOrder = await Order.findAll({ where: { order_id: order_id }, order: [['deadline', 'DESC']] });
        if(editingOrder.length == 0){
            const botMsg = botSendMessage(userID, `–ó–∞–∫–∞–∑ –Ω–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å!`, managerMenu);
            botMsg.then(msg => messageHistory.push(msg.message_id));
            return manager(userID, messageHistory)
        };
        editingOrder = editingOrder[0].dataValues;
        const orderCart = await createOrderCart(userID, editingOrder, 'edit');
        const infoText = '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ –º–∞–∫–µ—Ç - –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≥–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –ø–æ—Å–ª–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞–ø—Ä–∏–º–µ—Ä "–û–ø–∏—Å–∞–Ω–∏–µ" –∏ –¥–∞–ª—å—à–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.\n–û—Ç–ø—Ä–∞–≤—å "–ì–æ—Ç–æ–≤–æ" –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã, "–û—Ç–º–µ–Ω–∞" - —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å\n<b>–í–Ω–∏–º–∞–Ω–∏–µ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∞ –Ω–µ –¥–æ–ø–æ–ª–Ω—è—é—Ç—Å—è!</b>'; 
        
        const preview = botSendPhoto(userID, editingOrder.img_id, encodeURI(orderCart + '\n\n\n' + infoText), editOptions);
        preview.then(msg => messageHistory.push(msg.message_id));
        
        bot.on('message', async function editListener(msg) {
            // console.log(messageHistory);
            let firstWord = '';
            if(!!msg.text){
                console.log(msg.text);
                firstWord = msg.text.split(' ')[0].toLowerCase();
            }
            const chatId = msg.chat.id;
            if (userID == chatId) { 
                const userMsg = msg.message_id;
                const msgText = msg.text;
                const id = order_id;
                //–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if (!!msg.document) {
                    if (isCDRfile(msg.document.file_name)) {
                        editingOrder.file_id = msg.document.file_id;
                        bot.deleteMessage(userID, userMsg);
                        const file = botSendDocument(userID, editingOrder.file_id, encodeURI('–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω!'), editOptions);
                        file.then(msg => messageHistory.push(msg.message_id));
                        return
                    }
                    else {
                        messageHistory.push(userMsg);
                        const botMsg = botSendMessage(userID, `–ö–∞–∂–µ—Ç—Å—è —Ñ–∞–π–ª –Ω–µ —Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞`, editOptions);
                        botMsg.then(msg => messageHistory.push(msg.message_id));
                        return
                    }
                }
                //–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 
                if (!!msg.photo) {
                    await clearChat(userID, messageHistory);

                    messageHistory = [];
                    const HDPhoto = msg.photo.length - 1;
                    editingOrder.img_id = msg.photo[HDPhoto].file_id;
                    bot.deleteMessage(userID, userMsg);
                    const orderCart = await createOrderCart(userID, editingOrder, 'edit');
                    const preview = botSendPhoto(userID, editingOrder.img_id, encodeURI(orderCart + '\n\n\n<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>'), editOptions);
                    preview.then(msg => messageHistory.push(msg.message_id));
                    return
                };
                if(firstWord.slice(0,8)=='–æ–ø–∏—Å–∞–Ω–∏–µ'){
                    bot.deleteMessage(userID, userMsg)
                    clearChat(userID, messageHistory);
                    messageHistory = [];
                    editingOrder.description = msg.text.split(' ').slice(1).join(' ');
                    const orderCart = await createOrderCart(userID, editingOrder, 'edit');
                    const preview = botSendPhoto(userID, editingOrder.img_id, encodeURI(orderCart + '\n\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>'), editOptions);
                    preview.then(msg => messageHistory.push(msg.message_id));
                    return
                };
                if(firstWord.slice(0,8)=='–Ω–æ–º–µ—Ä'){
                    bot.deleteMessage(userID, userMsg)
                    clearChat(userID, messageHistory);
                    messageHistory = [];
                    editingOrder.number = msg.text.split(' ').slice(1).join(' ');
                    const orderCart = await createOrderCart(userID, editingOrder, 'edit');
                    const preview = botSendPhoto(userID, editingOrder.img_id, encodeURI(orderCart + '\n\n\n<b>–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏/–∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω!</b>'), editOptions);
                    preview.then(msg => messageHistory.push(msg.message_id));
                    return
                };
                if(firstWord.slice(0,8)=='–Ω–∞–∑–≤–∞–Ω–∏–µ'){
                    bot.deleteMessage(userID, userMsg)
                    clearChat(userID, messageHistory);
                    messageHistory = [];
                    editingOrder.order_name = msg.text.split(' ').slice(1).join(' ');
                    const orderCart = await createOrderCart(userID, editingOrder, 'edit');
                    const preview = botSendPhoto(userID, editingOrder.img_id, encodeURI(orderCart + '\n\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>'), editOptions);
                    preview.then(msg => messageHistory.push(msg.message_id));
                    return
                };
                if(firstWord.slice(0,8)=='—ç–ª–µ–º–µ–Ω—Ç—ã'){
                    if (!isNaN(msg.text.split(' ')[1])) {
                        editingOrder.elements = msg.text.split(' ')[1];
                        // newOrder.deadline = today.setDate(today.getDate() + +msg.text);
                        bot.deleteMessage(userID, userMsg)
                        clearChat(userID, messageHistory);
                        messageHistory = [];
                        const orderCart = await createOrderCart(userID, editingOrder, 'edit');
                        const preview = botSendPhoto(userID, editingOrder.img_id, encodeURI(orderCart + '\n\n\n<b>–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>'), editOptions);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    } else {
                        bot.deleteMessage(userID, userMsg)
                        const botMsg = botSendMessage(userID, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É', editOptions);
                        botMsg.then(msg => messageHistory.push(msg.message_id));
                        return
                    }
                };
                if(firstWord.slice(0,10)=='–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å'){
                    if (!isNaN(msg.text.split(' ')[1])) {
                        const today = new Date(msg.date * 1000);
                        editingOrder.deadline = Math.round(today.setDate(today.getDate() + +msg.text.split(' ')[1]) / 1000);
                        // newOrder.deadline = today.setDate(today.getDate() + +msg.text);
                        bot.deleteMessage(userID, userMsg)
                        clearChat(userID, messageHistory);
                        messageHistory = [];
                        const orderCart = await createOrderCart(userID, editingOrder, 'edit');
                        const preview = botSendPhoto(userID, editingOrder.img_id, encodeURI(orderCart + '\n\n\n<b>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>'), editOptions);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    } else {
                        bot.deleteMessage(userID, userMsg)
                        const botMsg = botSendMessage(userID, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É\n–ì–¥–µ 0 —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è, 1 - –∑–∞–≤—Ç—Ä–∞ –∏ —Ç.–¥.', editOptions);
                        botMsg.then(msg => messageHistory.push(msg.message_id));
                        return
                    }
                };
                if(firstWord.slice(0,4)=='–Ω–µ–æ–Ω'){
                    const neonInfo = await neonCalc(msg.text.split(' ').slice(1).join(' '));
                    bot.deleteMessage(userID, userMsg);
                    if (neonInfo !== undefined) {
                        editingOrder.neon = msg.text.split(' ').slice(1).join(' ');
                        editingOrder.power = neonInfo.power;
                        const orderCart = await createOrderCart(userID, editingOrder, 'edit');
                        const preview = botSendPhoto(userID, editingOrder.img_id, encodeURI(orderCart + '\n\n\n<b>–î–∞–Ω–Ω—ã–µ –Ω–µ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>'), editOptions);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    } else {
                        const botMsg = botSendMessage(userID, '–ß—Ç–æ —Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ!\n\n\n' + aboutNeonCodes, editOptions);
                        botMsg.then(msg => messageHistory.push(msg.message_id));
                        return
                    };
                };
                if(firstWord.slice(0,6)=='–¥–∏–º–º–µ—Ä'){
                    if (
                        msg.text.split(' ').slice(1).join(' ').toLowerCase() == '–Ω–µ—Ç' ||
                        msg.text.split(' ').slice(1).join(' ').toLowerCase() == '–∫–Ω–æ–ø–æ—á–Ω—ã–π' ||
                        msg.text.split(' ').slice(1).join(' ').toLowerCase() == '–ø—É–ª—å—Ç' ||
                        msg.text.split(' ').slice(1).join(' ').toLowerCase() == '–∫—Ä—É—Ç–∏–ª–∫–∞'
                    ) {
                        bot.deleteMessage(userID, userMsg)
                        clearChat(userID, messageHistory);
                        messageHistory = [];
                        editingOrder.dimer = msg.text.split(' ')[1];
                        const orderCart = await createOrderCart(userID, editingOrder, 'edit');
                        const preview = botSendPhoto(userID, editingOrder.img_id, encodeURI(orderCart + '\n\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–º–º–µ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>'), editOptions);
                        preview.then(msg => messageHistory.push(msg.message_id));
                        return
                    } else {
                        bot.deleteMessage(userID, userMsg)
                        const botMsg = botSendMessage(userID, '–ß—Ç–æ —Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ!', {
                            reply_markup: JSON.stringify({
                                keyboard: [
                                    [{ text: '–î–∏–º–º–µ—Ä –ù–µ—Ç' }],
                                    [{ text: '–î–∏–º–º–µ—Ä –ö–Ω–æ–ø–æ—á–Ω—ã–π' }],
                                    [{ text: '–î–∏–º–º–µ—Ä –ü—É–ª—å—Ç' }],
                                    [{ text: '–î–∏–º–º–µ—Ä –ö—Ä—É—Ç–∏–ª–∫–∞' }],
                                    [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å' }, { text: '–ì–æ—Ç–æ–≤–æ' }],
                                    [{ text: '–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑' }],
                                ],
                                resize_keyboard: true,
                            })
                        });
                        botMsg.then(msg => messageHistory.push(msg.message_id));
                        return
                    };
                };
                if (msgText === '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    bot.removeListener('message', editListener);
                    bot.deleteMessage(userID, userMsg);
                    const botMsg = botSendMessage(userID, '–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', managerMenu);
                    botMsg.then(msg => manager(userID, [msg.message_id]))
                    return await clearChat(userID, messageHistory);
                }
                if (msgText === '/start') {
                    bot.removeListener('message', editListener);
                    bot.deleteMessage(userID, userMsg);
                    const botMsg = botSendMessage(userID, '–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', managerMenu);
                    botMsg.then(msg => manager(userID, [msg.message_id]));
                    return await clearChat(userID, messageHistory);
                }
                if (msgText === '–ì–æ—Ç–æ–≤–æ') {
                    bot.deleteMessage(userID, userMsg);
                        await Order.update(
                            { order_name: editingOrder.order_name,
                            deadline: editingOrder.deadline,
                            neon: editingOrder.neon,
                            file_id: editingOrder.file_id,
                            img_id: editingOrder.img_id,
                            number: editingOrder.number,
                            description: editingOrder.description,
                            power: editingOrder.power,
                            dimer: editingOrder.dimer,
                            elements: editingOrder.elements,
                            },
                            { where: { order_id: order_id } }
                        );
                    bot.removeListener('message', editListener);
                    await clearChat(userID, messageHistory);
                    const botMsg = botSendMessage(userID, '–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã', managerMenu);
                    const shownOrders = findOrders(userID, { order_id: id });
                    shownOrders.then(order => {
                        messageHistory = [order[0].message_id];
                        botMsg.then(msg => messageHistory.push(msg.message_id));
                        return manager(userID, messageHistory);
                    });
                    return
                }
                else {
                    bot.deleteMessage(userID, userMsg);
                    const botMsg = botSendMessage(userID, '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ!\n\n' + infoText, editOptions);
                    botMsg.then(msg => messageHistory.push(msg.message_id));
                    return
                }
                // if (msgText !== '–û—Ç–º–µ–Ω–∏—Ç—å' &&
                //     msgText !== '–ì–æ—Ç–æ–≤–æ' &&
                //     !msg.photo && !msg.document) {
                //     newDatas.description = msgText;
                //     bot.editMessageCaption(msgText, { chat_id: userID, message_id: previewOrderID });
                //     bot.deleteMessage(userID, userMsg)
                //     // messageHistory.push(userMsg);
                //     const botMsg = botSendMessage(userID, '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', editOptions);
                //     botMsg.then(msg => messageHistory.push(msg.message_id))
                // }
            }
        });
    } catch (e) {
        console.log(e);
    }
};

//-------BOT-ACTIONS----------//
//–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º
async function botSendMessage(chatId, msgText, forms) {
    msgText = encodeURI(msgText);
    let path = `/bot${token}/sendMessage?chat_id=${chatId}&text=${msgText}&parse_mode=html`;
    if (forms !== undefined) {
        forms = encodeURI(forms.reply_markup);
        path += `&reply_markup=${forms}`;
    }
    const options = {
        hostname: 'api.telegram.org',
        port: 443,
        path: path,
        method: 'GET'
    };
    const httpGet = async (url) => {
        return new Promise((resolve, reject) => {
            https.get(url, res => {
                res.setEncoding('utf8');
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                    const { message_id } = JSON.parse(body).result;
                    resolve({ message_id })
                });
            }).on('error', reject);
        });
    };
    return httpGet(options);
}
//–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –±–æ—Ç–æ–º
async function botSendPhoto(chatId, photo_id, caption, forms) {
    let path = `/bot${token}/sendPhoto?chat_id=${chatId}&photo=${photo_id}&caption=${caption}&parse_mode=html`;
    if (forms !== undefined) {
        forms = encodeURI(forms.reply_markup);
        path += `&reply_markup=${forms}`;
    }
    if (forms !== undefined) {
        forms = encodeURI(forms.reply_markup);
        path += `&reply_markup=${forms}`;
    }
    const options = {
        hostname: 'api.telegram.org',
        port: 443,
        path: path,
        method: 'GET'
    };
    const httpGet = async (url) => {
        return new Promise((resolve, reject) => {
            https.get(url, res => {
                res.setEncoding('utf8');
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                    const { message_id, caption } = JSON.parse(body).result;
                    resolve({ message_id, caption })
                });
            }).on('error', reject);
        });
    };
    return httpGet(options);
}
//–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–æ—Ç–æ–º
// botSendDocument(317401874,'BQACAgIAAxkBAAJb82PGqUHQF3M0JA6AgGP7vt8miTGQAAIoJQAC-fU5SqhgJX9nbRyPLQQ', 'sdasa')
async function botSendDocument(chatId, file_id, caption, forms) {
    let path = `/bot${token}/sendDocument?chat_id=${chatId}&document=${file_id}&caption=${caption}&parse_mode=html`;
    if (forms !== undefined) {
        forms = encodeURI(forms.reply_markup);
        path += `&reply_markup=${forms}`;
    }
    if (forms !== undefined) {
        forms = encodeURI(forms.reply_markup);
        path += `&reply_markup=${forms}`;
    }
    const options = {
        hostname: 'api.telegram.org',
        port: 443,
        path: path,
        method: 'GET'
    };
    const httpGet = async (url) => {
        return new Promise((resolve, reject) => {
            https.get(url, res => {
                res.setEncoding('utf8');
                let body = '';
                res.on('data', chunk => body += chunk);
                res.on('end', () => {
                    const { message_id, caption } = JSON.parse(body).result;
                    resolve({ message_id, caption })
                });
            }).on('error', reject);
        });
    };
    return httpGet(options);
}


//------–ü–†–û–í–ï–†–ö–ò--------//
//–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
const neonCalc = async (code) => {
    let res = {
        neon: [],
        power: 0,
    }
    let colorCodes = {
        '–∫': '–∫—Ä–∞—Å–Ω—ã–π',
        '—Å': '—Å–∏–Ω–∏–π',
        '–∑': '–∑–µ–ª—ë–Ω—ã–π',
        '–æ': '–æ—Ä–∞–Ω–∂–µ–≤—ã–π',
        '–∂': '–∂–µ–ª—Ç—ã–π',
        '–≥': '–≥–æ–ª—É–±–æ–π',
        '—Ä': '—Ä–æ–∑–æ–≤—ã–π',
        '–±': '–±–µ—Ä—é–∑–æ–≤—ã–π',
        '—Ö': '—Ö–æ–ª–æ–¥–Ω—ã–π –±–µ–ª—ã–π',
        '—Ç': '—Ç—ë–ø–ª—ã–π –±–µ–ª—ã–π'
    };
    let codes = code.split(' ');
    for (let i = 0; i < codes.length; i++) {
        let neonWidth = codes[i][0];
        let colorCode = codes[i][1];
        let neonLength = codes[i].slice(2);
        if (neonWidth == '6' || neonWidth == '8') {
            res.neon.push(neonWidth + '–º–º')
        } else return;
        if (colorCodes[colorCode]) {
            res.neon[i] += ' ' + colorCodes[colorCode]
        } else return;
        if (!isNaN(+neonLength) && +neonLength > 0) {
            res.neon[i] += ` –¥–ª–∏–Ω–∞ ${neonLength * 1}–º`;
            res.power += neonLength * 14
        } else return;
    }
    if (res.power < 24) {
        res.power = 24
        return res
    }
    if (res.power < 36 && res.power >= 24) {
        res.power = 36
        return res
    }
    if (res.power < 60 && res.power >= 36) {
        res.power = 60
        return res
    }
    if (res.power < 100 && res.power >= 60) {
        res.power = 100
        return res
    }
    if (res.power >= 100) {
        res.power = 150
        return res
    }
}
//–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
const isCDRfile = (name) => {
    return name.slice(-4) === ".cdr"
}


//-------BD-ACTIONS----------//
//–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
const findOrders = async (chatId, parameters, cartOptions, change) => {
    //–¥–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    try {
        let datas = [];
        const foundOrders = await Order.findAll({ where: parameters, order: [['deadline', 'DESC']] });
        if (foundOrders.length == 0) {
            const botMsg = botSendMessage(chatId, "–¢—É—Ç –ø—É—Å—Ç–æ", managerMenu);
            return botMsg.then(msg => {
                return [msg];
            });
        }
        
        for (let order of foundOrders) {
            const orderCart = await createOrderCart(chatId, order, cartOptions, change);
            await botSendPhoto(chatId, order.img_id, encodeURI(orderCart))
            .then(data => {
                datas.push(data);
                // datas.push(order.dataValues);
                // console.log(datas);
            });
        };
        return datas
    } catch (e) {
        return console.log(e)
    }
}

//–ü—Ä–∏—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞
const createOrderCart = async (chatId, order, cartOptions, change) => {
    // console.log(order.dataValues);
    // let realOrder = order.dataValues;
    if (change){
        order = Object.assign(order, change);
    }
    const { order_id, order_name, manager_id, manager_name, deadline, dimer, number, neon, elements, file_id, img_id, description, master_name, condition, delivery }= order;
    const neonInfo = await neonCalc(neon);
    let orderCaption = {
        mainDesc: `<ins>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${new Date(deadline * 1000).getDate()}.${new Date(deadline * 1000).getMonth() + 1}</ins>;
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${order_name};
<b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> <a href="tg://user?id=${manager_id}">${manager_name}</a>;
<b>–ù–æ–º–µ—Ä:</b> ${number};
<b>–ù–µ–æ–Ω:</b> ${neonInfo.neon.join(', ')};
<b>–≠–ª–µ–º–µ–Ω—Ç–æ–≤:</b> ${elements};
<b>–ë–ª–æ–∫:</b> ${neonInfo.power}W;
<b>–î–∏–º–º–µ—Ä:</b> <i>${dimer}</i>
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}`,
        stage:
            `\n<b>–°—Ç–∞—Ç—É—Å:</b> ${condition}`,
        actions: `\n/edit_${order_id} - <i>–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑</i>
/send_${order_id} - <i>–í–Ω–µ—Å—Ç–∏/–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</i>
/file_${order_id} - <i>–ú–∞–∫–µ—Ç</i>`,
        // deliveryInfo: '\n<b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> ' + delivery
        masterAction:`
/take_${order_id} - <i>–í–∑—è—Ç—å —Ä —Ä–∞–±–æ—Ç—É</i>`
    }
    const { mainDesc, stage, actions, deliveryInfo, masterAction } = orderCaption;
    let orderText = ''
    if (cartOptions == 'edit') {
        orderText = mainDesc + stage + actions;
        orderText = mainDesc;
        // bot.sendDocument(chatId, file_id)
    } 
    if(cartOptions == 'master'){
        orderText = mainDesc + masterAction;
    }
    return orderText
}

//–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç(–î–æ—Ä–∞–±–æ—Ç–∞—Ç—å, —á—Ç–æ–±—ã –±–µ–∑ –æ—à–∏–±–æ–∫)
const clearChat = async (chatId, messages) => {
    messages.forEach(msg => {
        bot.deleteMessage(chatId, msg);
    });
    return [];
}

//–í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const getDeliveryDatas = async (userID, order_id, lastMsg = []) => {
    messageHistory = lastMsg;
    let deliveryData = '';
    try {
        const botMsg = botSendMessage(userID, '–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ"', editOptions);
        botMsg.then(msg => messageHistory.push(msg.message_id));
        bot.on('message', async function deliveryListener(msg) {
            const chatId = msg.chat.id;
            if (userID == chatId) {
                const userMsg = msg.message_id;
                const msgText = msg.text;
                const id = order_id;
                if (msgText == '–û—Ç–º–µ–Ω–∏—Ç—å') {
                    bot.removeListener('message', deliveryListener);
                    messageHistory.push(userMsg);
                    const botMsg = botSendMessage(userID, '–î–∞–Ω–Ω—ã–µ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã', managerMenu);
                    botMsg.then(msg => manager(userID, [msg.message_id]))
                    return await clearChat(userID, messageHistory);
                }
                if (msgText == '–ì–æ—Ç–æ–≤–æ') {
                    messageHistory.push(userMsg);
                    if (deliveryData !== '') {
                        await Order.update(
                            { delivery: deliveryData },
                            { where: { order_id: id } });
                        bot.removeListener('message', deliveryListener);
                        await clearChat(userID, messageHistory);
                        const botMsg = botSendMessage(userID, '–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã', managerMenu);
                        const shownOrders = findOrders(userID, { order_id: id });
                        shownOrders.then(orders => {
                            const botMsgs = orders.map(order => order.message_id);
                            messageHistory = botMsgs;
                            botMsg.then(msg => messageHistory.push(msg.message_id));
                            return manager(userID, messageHistory);
                        })
                    } else {
                        const botMsg = botSendMessage(userID, '–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ".\n–û—Ç–ø—Ä–∞–≤—å "–û—Ç–º–µ–Ω–∞", —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å', editOptions);
                        botMsg.then(msg => { messageHistory.push(msg.message_id) })
                    }
                }
                // if (msgText == '/start') {
                //     bot.removeListener('message', deliveryListener);
                //     messageHistory.push(userMsg);
                //     const botMsg = botSendMessage(userID, '–î–∞–Ω–Ω—ã–µ –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã', managerMenu);
                //     botMsg.then(msg => manager(userID, [msg.message_id]))
                //     return await clearChat(userID, messageHistory);
                // }
                if (msgText !== '–û—Ç–º–µ–Ω–∏—Ç—å' &&
                    msgText !== '–ì–æ—Ç–æ–≤–æ') {
                    deliveryData = msgText;
                    messageHistory.push(userMsg);
                    const botMsg = botSendMessage(userID, '–î–∞–Ω–Ω—ã–µ –ü–æ–ª—É—á–µ–Ω—ã. –ù–∞–∂–º–∏ –≥–æ—Ç–æ–≤–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë —Ä–∞–∑ –¥–∞–Ω–Ω—ã–µ.', editOptions);
                    botMsg.then(msg => messageHistory.push(msg.message_id))
                }

            }
        })
    } catch (e) {
        return console.log(e)
    }
}

// —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
//  sequelize.drop()
const statistic = async(userID, lastMsg = []) =>{

    const foundOrders = await Order.findAll({ where: {is_done:false}, order: [['deadline', 'DESC']] });
    // const res = foundOrders.map((el, i, array)=>{
    //         // console.log(el.dataValues.neon.split(' '));
    //         return el.dataValues.neon.split(' ');
    //         // if(el.dataValues.neon.slice(0,2)=='6–∫'){
    //         //     // console.log(el.dataValues.neon.slice(2,3));
    //         //     res += +el.dataValues.neon.slice(2,3);
    //         // }
    //     })
    //     .flat().filter((el,i)=>{
    //         return el.slice(0,2)=='6–∫'
    //     }).map((el, i, array)=>{
    //         return +el.slice(2);
    //     }).reduce(function(previousValue, currentValue, index, array) {
    //         return previousValue + currentValue;
    //       })
    let a = {
        neon:{},
        blocks:{}
    }
    const res = foundOrders.map((el, i, array)=>{
        a.items = array.length;
        // console.log(el.dataValues.power);
        return el.dataValues
    });

    res.map(el=>{
        let blok = el.power
        console.log(blok);
        if(!a.blocks.hasOwnProperty([blok])){
            a.blocks[blok] = 1;
        }
        else {
            a.blocks[blok] =  +a.blocks[blok] + 1;
        }
        })

        res.map(el=>{
            return el.neon.split(' ');
        }).flat()
        .map((el, i, array)=>{
                if(!a.neon.hasOwnProperty([el.slice(0,2)])){
                    a.neon[el.slice(0,2)] = +el.slice(2);
                }
                else {
                    a.neon[el.slice(0,2)]+= +el.slice(2)
                }
                return el
            })
            console.log(a);
            // console.log(neons);
            console.log(`–ó–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ ${a.items}`);
            // console.log(`–ó–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ ${a.items}`);
            // console.log(`–ó–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ ${a.items}`);
}
statistic(317401874)


// {
//     reply_markup: JSON.stringify({
//         inline_keyboard: [
//             [
//                 { text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', switch_inline_query_current_chat: `edit_${order_id} - –Ω–µ —É–¥–∞–ª—è—Ç—å!\n${description}\n`,},
//             ],
//             [
//                 { text: '–ò–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏', switch_inline_query_current_chat: `\n(ht)${description}\n`,}
//             ],
//             [
//                 { text: '–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', switch_inline_query_current_chat: `\n(ht)${description}\n`,}
//             ],
//             [
//                 { text: '–ú–∞–∫–µ—Ç', switch_inline_query_current_chat: `\n(ht)${description}\n`,}
//             ],
//         ]
//     })
// }

// const editOrder2 = async (userID, order_id, lastMsg = []) => {
    //     let messageHistory = lastMsg;
    //     const infoText = '–í—ã–±–µ—Ä–∏ —Ç–æ —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n–ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ï—Å–ª–∏ –º–∞–∫–µ—Ç - –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª\n–û—Å—Ç–∞–ª—å–Ω–æ–µ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–ª–∞–≤–∏—à.\n–û—Ç–ø—Ä–∞–≤—å "–ì–æ—Ç–æ–≤–æ" –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã'
    //     let newDatas = {
    //         file_id: null,
    //         img_id: null,
    //         description: null,
    //         order_name: null,
    //         deadline: null,
    //         neon: null,
    //         dimmer: null,
    //     }
    //     //–û–ø—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    //     const editOptions = {
    //         reply_markup: JSON.stringify({
    //             keyboard: [
    //                 [{ text: '–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏/—Ç–µ–ª–µ—Ñ–æ–Ω' }],
    //                 [{ text: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞' }],
    //                 [{ text: '–°—Ä–æ–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏' }],
    //                 [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–æ–Ω–µ' }],
    //                 [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–º–º–µ—Ä–µ' }],
    //                 [{ text: '–û–ø–∏—Å–∞–Ω–∏–µ' }],
    //                 [{ text: '–ì–æ—Ç–æ–≤–æ' }],
    //                 [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å' }],
    //             ],
    //         })
    //     }
    //     const botMsg = botSendMessage(userID, infoText, editOptions);
    //     try {
    //         botMsg.then(msg => {
    //             messageHistory.push(msg.message_id);
    //         });
    //         const editingOrder = findOrders(userID, { order_id: order_id }, 'edit');
    //         let previewOrderID = 0;
    //         let oldDescription = '';
    //         editingOrder.then(order => {
    //             messageHistory.push(order[0].message_id);
    //             previewOrderID = order[0].message_id;
    //             newDatas.description = order[0].caption;
    //             oldDescription = order[0].caption;
    //         })
    //         bot.on('message', async function editListener(msg) {
    //             console.log(messageHistory);
    //             const chatId = msg.chat.id;
    //             if (userID == chatId) {
    //                 const userMsg = msg.message_id;
    //                 const msgText = msg.text;
    //                 const id = order_id;
    //                 if (!!msg.document) {
    //                     if (isCDRfile(msg.document.file_name)) {
    //                         newDatas.file_id = msg.document.file_id;
    //                         messageHistory.push(userMsg);
    //                         const botMsg = botSendMessage(userID, `–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!`, editOptions);
    //                         botMsg.then(msg => messageHistory.push(msg.message_id));
    //                     }
    //                     else {
    //                         messageHistory.push(userMsg);
    //                         const botMsg = botSendMessage(userID, `–ö–∞–∂–µ—Ç—Å—è —Ñ–∞–π–ª –Ω–µ —Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞`, editOptions);
    //                         botMsg.then(msg => messageHistory.push(msg.message_id));
    //                     }
    //                 }
    //                 if (!!msg.photo) {
    //                     newDatas.img_id = msg.photo[3].file_id;
    //                     // messageHistory.push(userMsg); 
    //                     bot.deleteMessage(userID, userMsg)
    //                     bot.editMessageMedia({ type: 'photo', media: msg.photo[3].file_id, caption: newDatas.description }, { chat_id: userID, message_id: previewOrderID })
    //                     // const botMsg = botSendMessage(userID, `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`, editOptions);
    //                     // botMsg.then(msg => messageHistory.push(msg.message_id));
    //                 }
    //                 if (msgText === '–û—Ç–º–µ–Ω–∏—Ç—å') {
    //                     bot.removeListener('message', editListener);
    //                     messageHistory.push(userMsg);
    //                     const botMsg = botSendMessage(userID, '–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', managerMenu);
    //                     botMsg.then(msg => manager(userID, [msg.message_id]))
    //                     return await clearChat(userID, messageHistory);
    //                 }
    //                 // if (msgText === '/start') {
    //                 //     bot.removeListener('message', editListener);
    //                 //     messageHistory.push(userMsg);
    //                 //     const botMsg = botSendMessage(userID, '–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', managerMenu);
    //                 //     botMsg.then(msg => manager(userID, [msg.message_id]))
    //                 //     return await clearChat(userID, messageHistory);
    //                 // }
    //                 if (msgText === '–ì–æ—Ç–æ–≤–æ') {
    //                     messageHistory.push(userMsg);
    //                     if (newDatas.file_id !== null) {
    //                         await Order.update(
    //                             { file_id: newDatas.file_id },
    //                             { where: { order_id: order_id } }
    //                         )
    //                     }
    //                     if (newDatas.img_id !== null) {
    //                         await Order.update(
    //                             { img_id: newDatas.img_id },
    //                             { where: { order_id: order_id } }
    //                         )
    //                     }
    //                     if (newDatas.description !== oldDescription) {
    //                         await Order.update(
    //                             { description: newDatas.description },
    //                             { where: { order_id: order_id } }
    //                         )
    //                     }
    //                     if (newDatas.file_id == null &&
    //                         newDatas.img_id == null &&
    //                         newDatas.description == oldDescription) {
    //                         bot.removeListener('message', editListener);
    //                         const botMsg = botSendMessage(userID, '–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', managerMenu);
    //                         botMsg.then(msg => manager(userID, [msg.message_id]))
    //                         return await clearChat(userID, messageHistory);
    //                     }
    //                     bot.removeListener('message', editListener);
    //                     await clearChat(userID, messageHistory);
    //                     const botMsg = botSendMessage(userID, '–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã', managerMenu);
    //                     const shownOrders = findOrders(userID, { order_id: id });
    //                     shownOrders.then(order => {
    //                         messageHistory = [order[0].message_id];
    //                         botMsg.then(msg => messageHistory.push(msg.message_id));
    //                         return manager(userID, messageHistory);
    //                     });
    
    //                 }
    //                 if (msgText !== '–û—Ç–º–µ–Ω–∏—Ç—å' &&
    //                     msgText !== '–ì–æ—Ç–æ–≤–æ' &&
    //                     !msg.photo && !msg.document) {
    //                     newDatas.description = msgText;
    //                     bot.editMessageCaption(msgText, { chat_id: userID, message_id: previewOrderID });
    //                     bot.deleteMessage(userID, userMsg)
    //                     // messageHistory.push(userMsg);
    //                     const botMsg = botSendMessage(userID, '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', editOptions);
    //                     botMsg.then(msg => messageHistory.push(msg.message_id))
    //                 }
    //             }
    //         });
    //     } catch (e) {
    //         console.log(e);
    //     }
    // }
    // const createOrder2 = async (userID) => {
//     let messageHistory = []; 
//     const infoText = "–û—Ç–ø—Ä–∞–≤—å –æ—Ç–¥–µ–ª—å–Ω–æ:\n–ú–∞–∫–µ—Ç(.cdr). –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞!\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n–û–ø–∏—Å–∞–Ω–∏–µ"
//     const newOrder = {
//         order_name: null,
//         manager_id: userID,
//         manager_name: null,
//         file_id: null,
//         img_id: null,
//         description: null,
//     }
//     const botMsg = botSendMessage(userID, infoText, cancelOption);
//     try {
//         botMsg.then(msg => messageHistory.push(msg.message_id));
//         bot.on('message', async function dataListener(msg) {
//             const chatId = msg.chat.id;
//             newOrder.manager_name = msg.from.username;
//             // console.log(msg)
//             if (chatId == userID) {
//                 const userMsg = msg.message_id;
//                 messageHistory.push(userMsg);
//                 if (!!msg.document) {
//                     if (isCDRfile(msg.document.file_name)) {
//                         newOrder.order_name = msg.document.file_name.slice(0, -4);
//                         newOrder.file_id = msg.document.file_id;
//                         const botMsg = botSendMessage(userID, `–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!`, cancelOption);
//                         botMsg.then(msg => messageHistory.push(msg.message_id));
//                     } else {
//                         const botMsg = botSendMessage(userID, `–ö–∞–∂–µ—Ç—Å—è —Ñ–∞–π–ª –Ω–µ —Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞`, cancelOption);
//                         botMsg.then(msg => messageHistory.push(msg.message_id));
//                     }
//                 }
//                 if (!!msg.photo) {
//                     const HDPhoto = msg.photo.length - 1;
//                     newOrder.img_id = msg.photo[HDPhoto].file_id;
//                     const botMsg = botSendMessage(userID, `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!`, cancelOption);
//                     botMsg.then(msg => messageHistory.push(msg.message_id));
//                 }
//                 if (msg.text === '–û—Ç–º–µ–Ω–∏—Ç—å') {
//                     const botMsg = botSendMessage(userID, "–ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω", managerMenu);
//                     botMsg.then(msg => manager(userID, [msg.message_id]));
//                     await clearChat(userID, messageHistory);
//                     return bot.removeListener('message', dataListener);
//                 }
//                 // if (msg.text === "/start") {
//                 //     const botMsg = botSendMessage(userID, "–ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω", managerMenu);
//                 //     botMsg.then(msg => manager(userID, msg.message_id));
//                 //     await clearChat(userID, messageHistory);
//                 //     return bot.removeListener('message', dataListener);
//                 // }
//                 if (!!msg.text) {
//                     newOrder.description = msg.text;
//                     const botMsg = botSendMessage(userID, "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!", cancelOption);
//                     botMsg.then(msg => messageHistory.push(msg.message_id));
//                 }
//                 if (newOrder.order_name !== null &&
//                     newOrder.manager_id !== null &&
//                     newOrder.img_id !== null &&
//                     newOrder.description !== null &&
//                     newOrder.file_id !== null) {
//                     newOrder.manager_name = msg.chat.username;
//                     bot.removeListener('message', dataListener);
//                     const order = await Order.create(newOrder);
//                     const shownOrder = findOrders(userID, { order_id: order.dataValues.order_id })
//                     shownOrder.then(async (orders) => {
//                         await clearChat(userID, messageHistory);
//                         console.log(orders)
//                         messageHistory = [orders[0].message_id];
//                         // await orders.forEach(order => messageHistory.push(order.message_id))
//                         const botMsg = botSendMessage(userID, `–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω`, managerMenu);
//                         botMsg.then(msg => {
//                             messageHistory.push(msg.message_id);
//                             console.log(messageHistory);
//                             manager(userID, messageHistory);
//                         })
//                     })
//                     return
//                 }
//             }
//         })
//     } catch (e) {
//         return console.log(e)
//     }
// }

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
